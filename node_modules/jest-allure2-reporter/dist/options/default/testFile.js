"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testFile = void 0;
const tslib_1 = require("tslib");
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const utils_1 = require("../../utils");
const custom = tslib_1.__importStar(require("../custom"));
const common_1 = require("../common");
exports.testFile = {
    ignored: ({ testFile }) => !testFile.testExecError,
    historyId: ({ testFileMetadata, result }) => testFileMetadata.historyId ?? result.fullName,
    displayName: ({ testFileMetadata, filePath }) => testFileMetadata.displayName ?? filePath.join(node_path_1.default.sep),
    fullName: ({ filePath }) => filePath.join('/'),
    description: ({ testFileMetadata }) => testFileMetadata.description?.join('\n\n') ?? '',
    descriptionHtml: ({ testFileMetadata }) => testFileMetadata.descriptionHtml?.join('\n') ?? '',
    start: ({ testFileMetadata }) => testFileMetadata.start,
    stop: ({ testFileMetadata }) => testFileMetadata.stop,
    stage: ({ testFileMetadata, testFile }) => testFileMetadata.stage ?? (testFile.testExecError == null ? 'finished' : 'interrupted'),
    status: ({ testFileMetadata, testFile }) => testFileMetadata.status ?? getStatus(testFile),
    statusDetails: ({ $, testFile, testFileMetadata }) => testFileMetadata.statusDetails ?? $.stripAnsi((0, utils_1.getStatusDetails)(testFile.testExecError)),
    attachments: ({ testFileMetadata }) => testFileMetadata.attachments ?? [],
    parameters: ({ testFileMetadata }) => testFileMetadata.parameters ?? [],
    labels: (0, common_1.compose2)(custom.labels({
        suite: '(test file execution)',
    }), ({ testFileMetadata }) => testFileMetadata.labels ?? []),
    links: ({ testFileMetadata }) => testFileMetadata.links ?? [],
};
function getStatus(testFile) {
    if (testFile.testExecError != null) {
        return 'broken';
    }
    return testFile.numFailingTests > 0 ? 'failed' : 'passed';
}
//# sourceMappingURL=testFile.js.map