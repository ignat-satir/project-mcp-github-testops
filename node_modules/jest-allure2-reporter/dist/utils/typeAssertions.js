"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNotNullish = assertNotNullish;
exports.assertString = assertString;
exports.assertAttachmentContent = assertAttachmentContent;
exports.assertPrimitive = assertPrimitive;
exports.assertFunction = assertFunction;
exports.assertArray = assertArray;
exports.assertSeverity = assertSeverity;
exports.assertStatus = assertStatus;
exports.assertStage = assertStage;
const tslib_1 = require("tslib");
const node_util_1 = tslib_1.__importDefault(require("node:util"));
const isPromiseLike_1 = require("./isPromiseLike");
const SEVERITY_VALUES = new Set(['blocker', 'critical', 'normal', 'minor', 'trivial']);
const STATUS_VALUES = new Set(['failed', 'broken', 'passed', 'skipped', 'unknown']);
const STAGE_VALUES = new Set(['scheduled', 'running', 'finished', 'pending', 'interrupted']);
function assertNotNullish(value, name = 'value') {
    if (value == null) {
        throw new TypeError(`Expected a non-nullish ${name}, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
function assertString(value, name = 'value') {
    if (typeof value !== 'string') {
        throw new TypeError(`Expected a string ${name}, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
function assertAttachmentContent(value, name = 'value') {
    if ((0, isPromiseLike_1.isPromiseLike)(value)) {
        return;
    }
    if (typeof value !== 'string' && !Buffer.isBuffer(value) && !ArrayBuffer.isView(value)) {
        throw new TypeError(`Expected a string or a buffer "${name}, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
function assertPrimitive(value, name = 'value') {
    if (typeof value === 'string')
        return;
    if (typeof value === 'number')
        return;
    if (typeof value === 'boolean')
        return;
    if (value == null)
        return;
    throw new TypeError(`Expected a primitive ${name}, got instead: ${node_util_1.default.inspect(value)}`);
}
function assertFunction(function_, name = 'function') {
    if (typeof function_ !== 'function') {
        throw new TypeError(`Expected a ${name}, got instead: ${node_util_1.default.inspect(function_)}`);
    }
}
function assertArray(value, name = 'value') {
    if (!Array.isArray(value)) {
        throw new TypeError(`Expected an array ${name}, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
function assertSeverity(value) {
    if (!SEVERITY_VALUES.has(value)) {
        throw new TypeError(`Expected a valid severity level, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
function assertStatus(value) {
    if (!STATUS_VALUES.has(value)) {
        throw new TypeError(`Expected a valid status, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
function assertStage(value) {
    if (!STAGE_VALUES.has(value)) {
        throw new TypeError(`Expected a valid stage, got instead: ${node_util_1.default.inspect(value)}`);
    }
}
//# sourceMappingURL=typeAssertions.js.map