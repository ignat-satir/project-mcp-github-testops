"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JestMetadataReporter = exports.query = void 0;
const errors_1 = require("./errors");
const realms_1 = require("./realms");
const utils_1 = require("./utils");
const realm = realms_1.realm;
(0, realms_1.detectDuplicateRealms)(true);
exports.query = realm.query;
/**
 * @implements {import('@jest/reporters').Reporter}
 */
class JestMetadataReporter {
    static query = realm.query;
    constructor(_globalConfig) {
        if (realm.type !== 'parent_process') {
            throw new errors_1.JestMetadataError(`JestMetadataReporter can be used only in the parent process`);
        }
    }
    static get JestMetadataReporter() {
        utils_1.logger.warn(`Don't use named export 'JestMetadataReporter' from 'jest-metadata/reporter'. Use default export instead.`);
        return JestMetadataReporter;
    }
    getLastError() {
        return undefined;
    }
    onRunStart(_results, _options) {
        (0, realms_1.detectDuplicateRealms)(false);
        return realm.reporterServer.onRunStart();
    }
    /**
     * @deprecated
     */
    onTestStart(_test) {
        // Jest's ReporterDispatcher won't call this method due to existence of `onTestFileStart`.
    }
    onTestFileStart(test) {
        return realm.reporterServer.onTestFileStart(test.path);
    }
    /**
     * NEW! Supported only since Jest 29.6.0
     * @see {import('@jest/types').Circus.TestCaseStartInfo}
     */
    onTestCaseStart(test, testCaseStartInfo) {
        return realm.reporterServer.onTestCaseStart(test.path, testCaseStartInfo);
    }
    onTestCaseResult(test, testCaseResult) {
        return realm.reporterServer.onTestCaseResult(test.path, testCaseResult);
    }
    /**
     * @deprecated
     */
    onTestResult(_test, _testResult, _aggregatedResult) {
        // Jest's ReporterDispatcher won't call this method due to existence of `onTestFileResult`.
    }
    onTestFileResult(test, testResult, _aggregatedResult) {
        return realm.reporterServer.onTestFileResult(test.path, testResult);
    }
    onRunComplete(_testContexts, _aggregatedResult) {
        return realm.reporterServer.onRunComplete();
    }
}
exports.JestMetadataReporter = JestMetadataReporter;
exports.default = JestMetadataReporter;
//# sourceMappingURL=reporter.js.map