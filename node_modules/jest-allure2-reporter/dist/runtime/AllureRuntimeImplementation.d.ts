import type { AllureRuntimeBindOptions, AllureRuntimePluginCallback, AllureRuntime } from './types';
import type { AllureRuntimeContext } from './AllureRuntimeContext';
export declare class AllureRuntimeImplementation implements AllureRuntime {
    #private;
    constructor(context: AllureRuntimeContext);
    $bind: (options?: AllureRuntimeBindOptions) => AllureRuntimeImplementation;
    $plug: (callback: AllureRuntimePluginCallback) => this;
    flush: () => Promise<unknown>;
    description: AllureRuntime['description'];
    descriptionHtml: AllureRuntime['descriptionHtml'];
    displayName: AllureRuntime['displayName'];
    fullName: AllureRuntime['fullName'];
    historyId: AllureRuntime['historyId'];
    label: AllureRuntime['label'];
    link: AllureRuntime['link'];
    parameter: AllureRuntime['parameter'];
    parameters: AllureRuntime['parameters'];
    status: AllureRuntime['status'];
    statusDetails: AllureRuntime['statusDetails'];
    attachment: AllureRuntime['attachment'];
    createAttachment: AllureRuntime['createAttachment'];
    fileAttachment: AllureRuntime['fileAttachment'];
    createFileAttachment: AllureRuntime['createFileAttachment'];
    createStep: AllureRuntime['createStep'];
    step: AllureRuntime['step'];
    epic: AllureRuntime['epic'];
    feature: AllureRuntime['feature'];
    issue: AllureRuntime['issue'];
    owner: AllureRuntime['owner'];
    package: AllureRuntime['package'];
    parentSuite: AllureRuntime['parentSuite'];
    severity: AllureRuntime['severity'];
    story: AllureRuntime['story'];
    subSuite: AllureRuntime['subSuite'];
    suite: AllureRuntime['suite'];
    tag: AllureRuntime['tag'];
    tags: AllureRuntime['tags'];
    testClass: AllureRuntime['testClass'];
    testMethod: AllureRuntime['testMethod'];
    thread: AllureRuntime['thread'];
    tms: AllureRuntime['tms'];
}
