"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRun = void 0;
const tslib_1 = require("tslib");
const custom = tslib_1.__importStar(require("../custom"));
const common_1 = require("../common");
exports.testRun = {
    ignored: true,
    historyId: ({ testRunMetadata, result }) => testRunMetadata.historyId ?? result.fullName,
    fullName: ({ $, testRunMetadata }) => testRunMetadata.fullName ?? $.manifest(['name'], 'untitled project'),
    displayName: ({ testRunMetadata }) => testRunMetadata.displayName ?? '(test run)',
    description: ({ testRunMetadata }) => testRunMetadata.description?.join('\n\n') ?? '',
    descriptionHtml: ({ testRunMetadata }) => testRunMetadata.descriptionHtml?.join('\n') ?? '',
    start: ({ testRunMetadata, aggregatedResult }) => testRunMetadata.start ?? aggregatedResult.startTime,
    stop: ({ testRunMetadata }) => testRunMetadata.stop,
    stage: ({ testRunMetadata, aggregatedResult }) => testRunMetadata.stage ?? (aggregatedResult.wasInterrupted ? 'interrupted' : 'finished'),
    status: ({ testRunMetadata, aggregatedResult }) => testRunMetadata.status ?? (aggregatedResult.numFailedTestSuites > 0 ? 'failed' : 'passed'),
    statusDetails: ({ testRunMetadata }) => testRunMetadata.statusDetails,
    attachments: ({ testRunMetadata }) => testRunMetadata.attachments ?? [],
    parameters: (0, common_1.compose2)(custom.parameters({
        'a) Suites passed': ({ aggregatedResult }) => aggregatedResult.numPassedTestSuites,
        'b) Suites failed': ({ aggregatedResult }) => aggregatedResult.numFailedTestSuites - aggregatedResult.numRuntimeErrorTestSuites,
        'c) Suites broken': ({ aggregatedResult }) => aggregatedResult.numRuntimeErrorTestSuites,
        'd) Suites pending': ({ aggregatedResult }) => aggregatedResult.numPendingTestSuites,
    }), ({ testRunMetadata }) => testRunMetadata.parameters ?? []),
    labels: (0, common_1.compose2)(custom.labels({
        thread: '00',
        suite: '(test file execution)',
    }), ({ testRunMetadata }) => testRunMetadata.labels ?? []),
    links: ({ testRunMetadata }) => testRunMetadata.links ?? [],
};
//# sourceMappingURL=testRun.js.map