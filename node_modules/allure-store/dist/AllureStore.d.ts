import type { AllureReader } from './AllureReader';
import type { AllureWriter } from './AllureWriter';
import type { Category, CategoryInput, Container, ExecutorInfo, Result } from './types';
export interface AllureStoreConfig {
    reader: AllureReader;
    writer: AllureWriter;
}
export interface AllureStoreDirectoryConfig {
    overwrite?: boolean;
    onError?: ((error: Error) => void) | 'throw' | 'ignore';
}
export declare class AllureStore {
    #private;
    constructor(config: AllureStoreConfig);
    static fromConfig(config: AllureStoreConfig): Promise<AllureStore>;
    static fromDirectory(resultsDirectory: string, config?: AllureStoreDirectoryConfig): Promise<AllureStore>;
    getAllResults(): Promise<Result[]>;
    getLatestResults(): Promise<Result[]>;
    getCategories(): Promise<Category[] | null>;
    getEnvironment(): Promise<Record<string, string> | null>;
    getExecutor(): Promise<ExecutorInfo | null>;
    getContainer(id: string): Promise<Container | null>;
    getResult(id: string): Promise<Result | null>;
    writeCategories(categories: CategoryInput[]): Promise<void>;
    writeEnvironmentInfo(info: Record<string, string>): Promise<void>;
    writeExecutorInfo(info: ExecutorInfo): Promise<void>;
    writeResult(result: Result): Promise<void>;
    writeContainer(container: Container): Promise<void>;
}
//# sourceMappingURL=AllureStore.d.ts.map