import type { AggregatedIdentifier } from '../ids';
import * as symbols from '../symbols';
import { BaseMetadata } from './BaseMetadata';
import type { DescribeBlockMetadata } from './DescribeBlockMetadata';
import type { MetadataContext } from './MetadataContext';
import type { TestFileMetadata } from './TestFileMetadata';
import type { TestInvocationMetadata } from './TestInvocationMetadata';
export declare class TestEntryMetadata extends BaseMetadata {
    readonly describeBlock: DescribeBlockMetadata;
    readonly invocations: TestInvocationMetadata[];
    constructor(context: MetadataContext, describeBlock: DescribeBlockMetadata, id: AggregatedIdentifier);
    get lastInvocation(): TestInvocationMetadata | undefined;
    get file(): TestFileMetadata;
    ancestors(): IterableIterator<DescribeBlockMetadata>;
    allAncestors(): IterableIterator<BaseMetadata>;
    [symbols.start](): TestInvocationMetadata;
    [symbols.finish](skipped?: boolean): void;
}
